using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using BitBoard = System.Int64;

namespace Generator
{
    public class PieceSquareTablesEvaluator : MaterialOnlyEvaluator
    {
        protected override int EvaluateInternal(Board board)
        {
            var score = base.EvaluateInternal(board);

            score += ScorePawns(board);
            score += ScoreKnights(board);
            score += ScoreBishops(board);
            score += ScoreRooks(board);
            score += ScoreQueens(board);
            score += ScoreKings(board);

            return score;
        }

        protected virtual int ScorePawns(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhitePawn) + AddUpPieceSquareValues(board, Pieces.BlackPawn);
        }

        protected virtual int ScoreKnights(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhiteKnight) + AddUpPieceSquareValues(board, Pieces.BlackKnight);
        }

        protected virtual int ScoreBishops(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhiteBishop) + AddUpPieceSquareValues(board, Pieces.BlackBishop);
        }

        protected virtual int ScoreRooks(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhiteRook) + AddUpPieceSquareValues(board, Pieces.BlackRook);
        }

        protected virtual int ScoreQueens(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhiteQueen) + AddUpPieceSquareValues(board, Pieces.BlackQueen);
        }

        protected virtual int ScoreKings(Board board)
        {
            return AddUpPieceSquareValues(board, Pieces.WhiteKing) + AddUpPieceSquareValues(board, Pieces.BlackKing);
        }

        int AddUpPieceSquareValues(Board board, byte piece)
        {
            var kind = Pieces.GetKind(piece);

            var score = 0;
            if (kind == Pieces.King)
            {
                int sq = Pieces.IsWhite(piece) ? board.WhiteKingSquare : board.BlackKingSquare;

                score += PieceSquareTable[(int)board.GameStage, kind, sq];
            }
            else
            {
                var squares = board.BitBoard[piece];

                while (squares != 0)
                {
                    int sq = BitOperations.FindAndZeroLeastSignificantBit(ref squares);

                    score += PieceSquareTable[(int)board.GameStage, kind, sq];
                }
            }

            return Pieces.IsWhite(piece) ? score : -score;
        }

        public static readonly int[,,] PieceSquareTable = new int[,,] {

//opening
{ 
// None
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//PAWN
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0, 24, 24,  0,  0,  0,
        0,  0,  0, 12, 12,  0,  0,  0,
        0,  0,  0, -8, -8,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KNIGHT
{
      -10, -6, -4, -4, -4, -4, -6, -10,
       -6,  0,  0,  0,  0,  0,  0, -6,
       -4,  8, 10, 10, 10, 10,  8, -4,
       -4,  8,  8, 10, 10,  8,  8, -4,
       -4,  6,  8, 10, 10,  8,  6, -4,
       -4,  4, 10,  6,  6, 10,  4, -4,
       -6,  0,  0,  4,  4,  0,  0, -6,
      -10,-10, -6, -6, -6, -6,-10, -10
},

//BISHOP
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  6, 10, 10,  6,  0,  0,
        0,  6,  6, 10, 10,  6,  6,  0,
        0,  6,  6, 10, 10,  6,  6,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  8,  0,  0,  0,  0,  8,  0,
        0,  0,-10,  0,  0,-10,  0,  0
},

//ROOK
{
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0
},

//QUEEN
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  4,  4,  4,  0,  0,  0,
        0,  0,  0,  4,  0,  0,  0,  0
},

//KING
{
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
       -6, -6,-30,-30,-30,-30, -6, -6,
       14, 14, 14,-16,  0,-16, 12, 12
} },

//early middle game

{ 
// None
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},
//PAWN
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0, 12, 12,  0,  0,  0,
        0,  0,  0, 24, 24,  0,  0,  0,
        0,  0,  0, 12, 12,  0,  0,  0,
        0,  0,  0, -8, -8,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KNIGHT
{
      -10, -6, -4, -4, -4, -4, -6, -10,
       -6,  0,  0,  0,  0,  0,  0, -6,
       -4,  8, 10, 10, 10, 10,  8, -4,
       -4,  8,  8, 10, 10,  8,  8, -4,
       -4,  6,  8, 10, 10,  8,  6, -4,
       -4,  4, 10,  6,  6, 10,  4, -4,
       -6,  0,  0,  4,  4,  0,  0, -6,
      -10, -8, -4, -4, -4, -4, -8, -10
},

//BISHOP
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  6, 10, 10,  6,  0,  0,
        0,  6,  6, 10, 10,  6,  6,  0,
        0,  6,  6, 10, 10,  6,  6,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  8,  0,  0,  0,  0,  8,  0,
        0,  0,-10,  0,  0,-10,  0,  0
},

//ROOK
{
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0
},

//QUEEN
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  4,  4,  4,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KING
{
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
      -30,-30,-30,-30,-30,-30,-30,-30,
       -6, -6,-30,-30,-30,-30, -6, -6,
       14, 14, 14,-16,  0,-16, 12, 12
} },

//late middle game
{ 
// None
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},
//PAWN
{
        0,  0,  0,  0,  0,  0,  0,  0,
       18, 24, 32, 48, 48, 32, 24, 18,
       12, 16, 18, 24, 24, 18, 16, 12,
        8, 10, 12, 16, 16, 12, 10,  8,
        4,  4,  4, 16, 16,  4,  4,  4,
        2,  2,  2,  6,  6,  2,  2,  2,
        0,  0,  0, -6, -6,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KNIGHT
{
      -10, -6, -4, -4, -4, -4, -6, -10,
       -6,  0,  0,  0,  0,  0,  0, -6,
       -4,  8, 10, 10, 10, 10,  8, -4,
       -4,  8,  8, 10, 10,  8,  8, -4,
       -4,  6,  8, 10, 10,  8,  6, -4,
       -4,  4, 10,  6,  6, 10,  4, -4,
       -6,  0,  0,  4,  4,  0,  0, -6,
      -10, -6, -4, -4, -4, -4, -6, -10
},

//BISHOP
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  6,  6,  8,  8,  6,  6,  0,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  8,  8, 10, 10,  8,  8,  0,
        0,  8,  8, 10, 10,  8,  8,  0,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  6,  6,  8,  8,  6,  6,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//ROOK
{
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0,
        0,  0,  4,  8,  8,  4,  0,  0
},

//QUEEN
{
        0,  0,  0,  0,  0,  0,  0,  0,
       14, 14, 14, 14, 14, 14, 14, 14,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  6,  8, 10, 10,  8,  6,  0,
        0,  6,  8, 10, 10,  8,  6,  0,
        0,  4,  6,  6,  6,  6,  4,  0,
        0,  0,  4,  4,  4,  4,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KING
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
} },

//endgame

{ 
// None
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},
//PAWN
{
        0,  0,  0,  0,  0,  0,  0,  0,
       44, 60, 72, 80, 80, 72, 60, 44,
       22, 30, 36, 44, 44, 36, 30, 22,
       12, 16, 18, 22, 22, 18, 16, 12,
        8, 10, 12, 14, 14, 12, 10,  8,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KNIGHT
{
      -10, -6, -4, -4, -4, -4, -6, -10,
       -6,  0,  0,  0,  0,  0,  0, -6,
       -4,  8, 10, 10, 10, 10,  8, -4,
       -4,  8,  8, 10, 10,  8,  8, -4,
       -4,  6,  8, 10, 10,  8,  6, -4,
       -4,  4, 10,  6,  6, 10,  4, -4,
       -6,  0,  0,  4,  4,  0,  0, -6,
      -10, -6, -4, -4, -4, -4, -6, -10
},

//BISHOP
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  6,  6,  8,  8,  6,  6,  0,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  8,  8, 10, 10,  8,  8,  0,
        0,  8,  8, 10, 10,  8,  8,  0,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  6,  6,  8,  8,  6,  6,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//ROOK
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//QUEEN
{
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  6,  6,  6,  6,  6,  6,  6,
        0,  6,  8,  8,  8,  8,  6,  0,
        0,  6,  8, 10, 10,  8,  6,  0,
        0,  6,  8, 10, 10,  8,  6,  0,
        0,  4,  6,  6,  6,  6,  4,  0,
        0,  0,  4,  4,  4,  4,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
},

//KING
{
      -24,-16,-12, -8, -8,-12,-16,-24,
      -16,  4,  6,  8,  8,  6,  4,-16,
      -12,  6, 24, 32, 32, 24,  6,-12,
       -8,  8, 32, 46, 46, 32,  8, -8,
       -8,  8, 32, 46, 46, 32,  8, -8,
      -12,  6, 24, 30, 32, 24,  6,-12,
      -16,  4,  6,  8,  8,  6,  4,-16,
      -24,-16,-12, -8, -8,-12,-16,-24
} } };
    }
}
